//****Реализовать класс Matrix.
// В классе надо реализовать следующие операторы :
//	- операторы ввода - вывода(>> , << )
//	- операторы равно и не равно(== , != )
//	- оператор индексирования(получение элемента по строке и столбцу) (как говорил лучше реализовать через оператор[i][j], если не получится,
//  то можно попробовать через оператор вызова(i, j), или уже через свой собственный метод)
//	- арифметические операторы сложения, вычитания, умножения(каждая операция с числом и с матрицей) (+, -, *, +=, -=, *=)
//	- операторы инкремента и декремента(++, --) : префиксные и постфиксные(поэлементно добавить 1 и отнять 1 соответственно)
//**Для простоты можно реализовать целочисленную матрицу(с вещественнными могут быть нюансы при сравнении(обычно вещественные числа 
// сравниваются с погрешностью. Кому будет интересно, то в интернете можно исследовать тему относительная погрешность и сравнение вещественных чисел)).
//
//#На 9 максимум - это реализация с вектором векторов
//#На 10 - с одним вектором

#include <iostream>
#include "matrix.h"

int main()
{
	Matrix m1(10, 10);
	Matrix m2(10, 10);
	Matrix m3(3, 3);
	int n = 1;
	for (int i = 0; i < m1.GetRow(); ++i) {
		for (int j = 0; j < m1.GetCol(); ++j) {
			m1[i][j] = i;
			n++;
		}
	}

	for (int i = 0; i < m2.GetRow(); ++i) {
		for (int j = 0; j < m2.GetCol(); ++j) {
			m2[i][j] = j;
		}
	}

	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2;

	m2 = m1;
	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2;

	m1 += 1;
	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2;

	m3 = m1 + 4;
	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2 << "\nmatrix3:\n" << m3;

	m1 += m2;
	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2;

	m3 = m1 + m2;
	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2 << "\nmatrix3:\n" << m3;

	m1 -= 1;
	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2;

	m3 = m1 - 1;
	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2 << "\n matrix3:\n" << m3;
	
	m1 -= m2;
	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2;

	m1 *= m2;
	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2;

	m3 = m1 * m2;
	std::cout << "matrix1:\n" << m1 << "\nmatrix2:\n" << m2 << "\n matrix3:\n" << m3;

	++m1;
	std::cout << "++matrix1:\n" << m1;
	
	--m1;
	std::cout << "--matrix1:\n" << m1;

	m1[9][9] = 67;
	std::cout << m1;
}